security:
    # Хэширование паролей
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: auto

    # Провайдер пользователей (загрузка из базы данных)
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur # Убедитесь, что у вас есть эта сущность
                property: email

    # Firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login # Роут для страницы входа
                check_path: app_login # Роут для обработки формы входа
            logout:
                path: app_logout # Роут для выхода
                target: app_home # Куда перенаправлять после выхода
            custom_authenticator: App\Security\UserFormAuthenticator
            entry_point: App\Security\UserFormAuthenticator # Entry point для аутентификации

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

    # Иерархия ролей
    role_hierarchy:
        ROLE_CLIENT: ROLE_USER
        ROLE_ADMIN: [ROLE_CLIENT, ROLE_MANAGER] # Администратор наследует права клиента и менеджера

    # Контроль доступа
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN } # Доступ к /admin только для ROLE_ADMIN
        - { path: ^/profile, roles: ROLE_USER } # Доступ к /profile для ROLE_USER
        - { path: ^/contact, roles: ROLE_CLIENT } # Доступ к /contact для ROLE_CLIENT

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Низкая сложность для bcrypt
                time_cost: 3 # Низкая сложность для argon
                memory_cost: 10 # Низкая сложность для argon
